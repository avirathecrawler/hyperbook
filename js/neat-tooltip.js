/// <reference path="typings/tsd.d.ts" />
var Tooltip;
(function (_Tooltip) {
    var active;
    var close = function () {
        if (active)
            active.close();
    };
    $.tooltip = function (action) {
        switch (action) {
            case 'close':
                close();
                break;
            case 'get': return active;
            case 'position':
                if (active)
                    active.position();
                break;
            default: throw 'Not supported action ' + action;
        }
    };
    //Indicates if a jquery set contains a given DOM node
    function $contains(e, elem, includeSelf) {
        if (includeSelf === void 0) { includeSelf = true; }
        for (var i = 0; i < e.length; i++) {
            if ((includeSelf && e.get(i) == elem) || $.contains(e.get(i), elem))
                return true;
        }
        return false;
    }
    ;
    (function ($) {
        //Display a tooltip once
        $.fn.showTooltip = function (options) {
            if (this.length)
                new Tooltip(this.eq(0), options);
        };
        //Display a tooltip once
        $.fn.closeTooltip = function (options) {
            return this.each(function () {
                var t = $(this).data('_tooltip');
                if (t)
                    t.close();
            });
        };
        //Bind tooltip display to event
        $.fn.tooltip = function (options, showOn, selector) {
            if (showOn === void 0) { showOn = 'hover'; }
            if (showOn == 'hover') {
                var show = function () {
                    $(this).showTooltip(options);
                };
                this.on('mouseenter', selector, show).on('mouseleave', selector, function () {
                    $(this).closeTooltip();
                }).on('click', selector, show);
            }
            else if (showOn == 'click') {
                this.on('click', selector, function () {
                    var e = $(this);
                    if (e.data('_tooltip'))
                        e.closeTooltip();
                    else
                        e.showTooltip(options);
                    return false;
                });
            }
            else {
                throw 'This value is not supported for argument showOn: ' + showOn;
            }
            return this;
        };
        //Hide tooltip on click outside target element and popup
        $('html').click(function (ev) {
            var t = active;
            if (t && t.options.closeOnClickOuside && !$contains(t.tooltip.add(t.target), ev.target))
                t.close();
        });
        $(window).resize(function () {
            $.tooltip('position');
        });
    })(jQuery);
    var Tooltip = (function () {
        function Tooltip(targetElem, options) {
            var _this = this;
            this.targetElem = targetElem;
            this.options = options;
            this.closeCallback = function () {
                _this.close();
                return false;
            };
            this.options = $.extend({
                position: 'bottom',
                source: 'title',
                cssClass: '',
                closeSelector: '.tooltip-close',
                distance: 5,
                closeOnClickOuside: true,
                delay: 200,
                container: window,
                margin: 10,
                appendTo: 'body'
            }, options);
            this.target = $(targetElem).addClass('has-tooltip').data('_tooltip', this);
            if (this.options.delay) {
                this.showTimeout = setTimeout(function () { return _this.show(); }, this.options.delay);
            }
            else {
                this.show();
            }
        }
        Tooltip.prototype.getContent = function () {
            var c = this.options.content;
            if (c) {
                c = $.isFunction(c) ? c.call(this.target) : c;
                return !c ? null : typeof c == 'string' ? $('<div>').html(c) : $(c);
            }
            if (this.options.source == 'title') {
                var title = this.target.attr('title') || this.target.data('title');
                this.target.attr('title', '').data('title', title);
                return $('<div>').html(title);
            }
            if (this.options.source == 'anchor') {
                var content = $(this.target.attr('href'));
                return content.length ? content : null;
            }
        };
        Tooltip.prototype.show = function () {
            this.content = this.getContent();
            if (!this.content)
                return;
            close();
            this.content.off('click', this.closeCallback).on('click', this.options.closeSelector, this.closeCallback);
            var o = this.options;
            var appendTo = $(this.options.appendTo).first();
            this.tooltip = $('<div class="tooltip-frame"/>').addClass(o.cssClass).addClass('tooltip-' + o.position).append(this.content.show()).append($('<div class="tip"/>')).appendTo(appendTo);
            if (appendTo.css('position') == 'static')
                appendTo.css('position', 'relative');
            this.target.data('_tooltip', this);
            this.position();
            active = this;
        };
        Tooltip.prototype.position = function () {
            var margin = this.options.margin;
            var t = this.tooltip;
            var e = this.target;
            var o = this.options;
            if (!t)
                return;
            //Reset so dimentions calculations are correct
            t.removeAttr('style');
            var offset = e.offset();
            var container = this.options.container;
            var containerLeft = container === window ? 0 : $(container).offset().left;
            var minLeft = containerLeft + margin;
            var maxRight = (containerLeft + $(container).outerWidth()) - margin;
            var w = t.outerWidth();
            var left = Math.max(minLeft, offset.left + e.outerWidth() / 2 - w / 2);
            var rightOverflow = (left + w) - maxRight;
            if (rightOverflow > 0)
                left = Math.max(minLeft, left - rightOverflow);
            var parentOffset = t.parent().offset();
            t.css({
                'left': (left - parentOffset.left) + 'px',
                'max-width': (maxRight - left) + 'px'
            }).find('.tip').css('left', offset.left + e.outerWidth() / 2 - left + 'px');
            //Setting width can make height vary. So we set vertical position after.
            var h = t.outerHeight();
            t.css('top', (o.position == 'top' ? offset.top - h - o.distance : offset.top + e.outerHeight() + o.distance) - parentOffset.top);
        };
        Tooltip.prototype.close = function () {
            clearTimeout(this.showTimeout);
            if (!this.tooltip)
                return;
            if (this.options.source == 'anchor')
                this.content.hide().appendTo('body');
            this.tooltip.remove();
            this.tooltip = null;
            this.target.data('_tooltip', null);
            active = null;
        };
        return Tooltip;
    })();
    _Tooltip.Tooltip = Tooltip;
})(Tooltip || (Tooltip = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5lYXQtdG9vbHRpcC50cyJdLCJuYW1lcyI6WyJUb29sdGlwIiwiVG9vbHRpcC4kY29udGFpbnMiLCJUb29sdGlwLlRvb2x0aXAiLCJUb29sdGlwLlRvb2x0aXAuY29uc3RydWN0b3IiLCJUb29sdGlwLlRvb2x0aXAuZ2V0Q29udGVudCIsIlRvb2x0aXAuVG9vbHRpcC5zaG93IiwiVG9vbHRpcC5Ub29sdGlwLnBvc2l0aW9uIiwiVG9vbHRpcC5Ub29sdGlwLmNsb3NlIl0sIm1hcHBpbmdzIjoiQUFBQSx5Q0FBeUM7QUFJekMsSUFBTyxPQUFPLENBOE1iO0FBOU1ELFdBQU8sUUFBTyxFQUFDLENBQUM7SUFDWkEsSUFBSUEsTUFBZUEsQ0FBQ0E7SUFFcEJBLElBQUlBLEtBQUtBLEdBQUdBO1FBQ1IsRUFBRSxDQUFBLENBQUMsTUFBTSxDQUFDO1lBQ04sTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQ0E7SUFFRkEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsR0FBR0EsVUFBU0EsTUFBY0E7UUFDL0IsTUFBTSxDQUFBLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQztZQUNYLEtBQUssT0FBTztnQkFBRyxLQUFLLEVBQUUsQ0FBQztnQkFBQyxLQUFLLENBQUM7WUFDOUIsS0FBSyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUMxQixLQUFLLFVBQVU7Z0JBQUUsRUFBRSxDQUFBLENBQUMsTUFBTSxDQUFDO29CQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFBQyxLQUFLLENBQUM7WUFDckQsU0FBUyxNQUFNLHVCQUF1QixHQUFHLE1BQU0sQ0FBQztRQUNwRCxDQUFDO0lBQ0wsQ0FBQyxDQUFDQTtJQUVGQSxBQUNBQSxxREFEcURBO2FBQzVDQSxTQUFTQSxDQUFDQSxDQUFTQSxFQUFFQSxJQUFpQkEsRUFBRUEsV0FBa0JBO1FBQWxCQywyQkFBa0JBLEdBQWxCQSxrQkFBa0JBO1FBQy9EQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtZQUNoQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsV0FBV0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ2hFQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNwQkEsQ0FBQ0E7UUFDREEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7SUFDakJBLENBQUNBO0lBQUFELENBQUNBO0lBRUZBLENBQUNBLFVBQVVBLENBQUNBO1FBRVIsQUFDQSx3QkFEd0I7UUFDeEIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEdBQUcsVUFBVSxPQUFPO1lBQ2hDLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7Z0JBQ1gsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUM7UUFFRixBQUNBLHdCQUR3QjtRQUN4QixDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksR0FBRyxVQUFVLE9BQU87WUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7Z0JBQ2IsSUFBSSxDQUFDLEdBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDMUMsRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFDO29CQUNELENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNsQixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQztRQUVGLEFBQ0EsK0JBRCtCO1FBQy9CLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxHQUFHLFVBQVUsT0FBTyxFQUFFLE1BQWdCLEVBQUUsUUFBZ0I7WUFBbEMsc0JBQWdCLEdBQWhCLGdCQUFnQjtZQUM5QyxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDcEIsSUFBSSxJQUFJLEdBQUc7b0JBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtnQkFBQyxDQUFDLENBQUM7Z0JBQ3hELElBQUksQ0FDQyxFQUFFLENBQUMsWUFBWSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FDaEMsRUFBRSxDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUU7b0JBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDO2dCQUFBLENBQUMsQ0FBQyxDQUMvRCxFQUFFLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUVyQyxDQUFDO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQSxDQUFDO2dCQUMxQixJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUU7b0JBQ3ZCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDaEIsRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzt3QkFDbEIsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDO29CQUNyQixJQUFJO3dCQUNBLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQzNCLE1BQU0sQ0FBQyxLQUFLLENBQUM7Z0JBQ2pCLENBQUMsQ0FBQyxDQUFDO1lBQ1AsQ0FBQztZQUFBLElBQUksQ0FBQSxDQUFDO2dCQUNGLE1BQU0sbURBQW1ELEdBQUcsTUFBTSxDQUFDO1lBQ3ZFLENBQUM7WUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUMsQ0FBQztRQUVGLEFBQ0Esd0RBRHdEO1FBQ3hELENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQztZQUNmLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLGtCQUFrQixJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3BGLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQztRQUVILENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDYixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtJQUVYQSxJQUFhQSxPQUFPQTtRQU9oQkUsU0FQU0EsT0FBT0EsQ0FPSUEsVUFBdUJBLEVBQVNBLE9BQXdCQTtZQVBoRkMsaUJBNkhDQTtZQXRIdUJBLGVBQVVBLEdBQVZBLFVBQVVBLENBQWFBO1lBQVNBLFlBQU9BLEdBQVBBLE9BQU9BLENBQWlCQTtZQUhwRUEsa0JBQWFBLEdBQUdBO2dCQUFRQSxLQUFJQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtnQkFBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7WUFBQ0EsQ0FBQ0EsQ0FBQ0E7WUFJMURBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBO2dCQUNwQkEsUUFBUUEsRUFBRUEsUUFBUUE7Z0JBQ2xCQSxNQUFNQSxFQUFFQSxPQUFPQTtnQkFDZkEsUUFBUUEsRUFBRUEsRUFBRUE7Z0JBQ1pBLGFBQWFBLEVBQUVBLGdCQUFnQkE7Z0JBQy9CQSxRQUFRQSxFQUFFQSxDQUFDQTtnQkFDWEEsa0JBQWtCQSxFQUFFQSxJQUFJQTtnQkFDeEJBLEtBQUtBLEVBQUVBLEdBQUdBO2dCQUNWQSxTQUFTQSxFQUFFQSxNQUFNQTtnQkFDakJBLE1BQU1BLEVBQUVBLEVBQUVBO2dCQUNWQSxRQUFRQSxFQUFFQSxNQUFNQTthQUNuQkEsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0E7WUFFWkEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDM0VBLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLENBQUFBLENBQUNBO2dCQUNuQkEsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsVUFBVUEsQ0FBQ0EsY0FBTUEsT0FBQUEsS0FBSUEsQ0FBQ0EsSUFBSUEsRUFBRUEsRUFBWEEsQ0FBV0EsRUFBRUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7WUFDekVBLENBQUNBO1lBQUFBLElBQUlBLENBQUFBLENBQUNBO2dCQUNGQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUNoQkEsQ0FBQ0E7UUFDTEEsQ0FBQ0E7UUFFT0QsNEJBQVVBLEdBQWxCQTtZQUNJRSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQTtZQUM3QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ0pBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUM5Q0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsT0FBT0EsQ0FBQ0EsSUFBSUEsUUFBUUEsR0FBSUEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDekVBLENBQUNBO1lBR0RBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLElBQUlBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO2dCQUNqQ0EsSUFBSUEsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ25FQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtnQkFDbkRBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1lBQ2xDQSxDQUFDQTtZQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxJQUFJQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDbENBLElBQUlBLE9BQU9BLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO2dCQUMxQ0EsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsTUFBTUEsR0FBR0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDM0NBLENBQUNBO1FBQ0xBLENBQUNBO1FBRU9GLHNCQUFJQSxHQUFaQTtZQUNJRyxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxVQUFVQSxFQUFFQSxDQUFDQTtZ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IDxyZWZlcmVuY2UgcGF0aD1cInR5cGluZ3MvdHNkLmQudHNcIiAvPlxyXG5cclxuXHJcblxyXG5tb2R1bGUgVG9vbHRpcCB7XHJcbiAgICB2YXIgYWN0aXZlOiBUb29sdGlwO1xyXG5cclxuICAgIHZhciBjbG9zZSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgaWYoYWN0aXZlKVxyXG4gICAgICAgICAgICBhY3RpdmUuY2xvc2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgJC50b29sdGlwID0gZnVuY3Rpb24oYWN0aW9uOiBzdHJpbmcpe1xyXG4gICAgICAgIHN3aXRjaChhY3Rpb24pe1xyXG4gICAgICAgICAgICBjYXNlICdjbG9zZScgOiBjbG9zZSgpOyBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnZ2V0JzogcmV0dXJuIGFjdGl2ZTtcclxuICAgICAgICAgICAgY2FzZSAncG9zaXRpb24nOiBpZihhY3RpdmUpIGFjdGl2ZS5wb3NpdGlvbigpOyBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDogdGhyb3cgJ05vdCBzdXBwb3J0ZWQgYWN0aW9uICcgKyBhY3Rpb247XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvL0luZGljYXRlcyBpZiBhIGpxdWVyeSBzZXQgY29udGFpbnMgYSBnaXZlbiBET00gbm9kZVxyXG4gICAgZnVuY3Rpb24gJGNvbnRhaW5zKGU6IEpRdWVyeSwgZWxlbTogSFRNTEVsZW1lbnQsIGluY2x1ZGVTZWxmID0gdHJ1ZSkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoKGluY2x1ZGVTZWxmICYmIGUuZ2V0KGkpID09IGVsZW0pIHx8ICQuY29udGFpbnMoZS5nZXQoaSksIGVsZW0pKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcblxyXG4gICAgKGZ1bmN0aW9uICgkKSB7XHJcblxyXG4gICAgICAgIC8vRGlzcGxheSBhIHRvb2x0aXAgb25jZVxyXG4gICAgICAgICQuZm4uc2hvd1Rvb2x0aXAgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICBpZih0aGlzLmxlbmd0aClcclxuICAgICAgICAgICAgICAgIG5ldyBUb29sdGlwKHRoaXMuZXEoMCksIG9wdGlvbnMpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vRGlzcGxheSBhIHRvb2x0aXAgb25jZVxyXG4gICAgICAgICQuZm4uY2xvc2VUb29sdGlwID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHQgPSA8VG9vbHRpcD4kKHRoaXMpLmRhdGEoJ190b29sdGlwJyk7XHJcbiAgICAgICAgICAgICAgICBpZih0KVxyXG4gICAgICAgICAgICAgICAgICAgIHQuY2xvc2UoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9CaW5kIHRvb2x0aXAgZGlzcGxheSB0byBldmVudFxyXG4gICAgICAgICQuZm4udG9vbHRpcCA9IGZ1bmN0aW9uIChvcHRpb25zLCBzaG93T24gPSAnaG92ZXInLCBzZWxlY3Rvcj86c3RyaW5nKSB7XHJcbiAgICAgICAgICAgIGlmIChzaG93T24gPT0gJ2hvdmVyJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNob3cgPSBmdW5jdGlvbiAoKSB7ICQodGhpcykuc2hvd1Rvb2x0aXAob3B0aW9ucykgfTtcclxuICAgICAgICAgICAgICAgIHRoaXNcclxuICAgICAgICAgICAgICAgICAgICAub24oJ21vdXNlZW50ZXInLCBzZWxlY3Rvciwgc2hvdylcclxuICAgICAgICAgICAgICAgICAgICAub24oJ21vdXNlbGVhdmUnLCBzZWxlY3RvciwgZnVuY3Rpb24oKXskKHRoaXMpLmNsb3NlVG9vbHRpcCgpO30pXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uKCdjbGljaycsIHNlbGVjdG9yLCBzaG93KTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hvd09uID09ICdjbGljaycpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbignY2xpY2snLCBzZWxlY3RvciwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0gJCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZihlLmRhdGEoJ190b29sdGlwJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuY2xvc2VUb29sdGlwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnNob3dUb29sdGlwKG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIHRocm93ICdUaGlzIHZhbHVlIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIGFyZ3VtZW50IHNob3dPbjogJyArIHNob3dPbjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9IaWRlIHRvb2x0aXAgb24gY2xpY2sgb3V0c2lkZSB0YXJnZXQgZWxlbWVudCBhbmQgcG9wdXBcclxuICAgICAgICAkKCdodG1sJykuY2xpY2soZnVuY3Rpb24gKGV2KSB7XHJcbiAgICAgICAgICAgIHZhciB0ID0gYWN0aXZlO1xyXG4gICAgICAgICAgICBpZiAodCAmJiB0Lm9wdGlvbnMuY2xvc2VPbkNsaWNrT3VzaWRlICYmICEkY29udGFpbnModC50b29sdGlwLmFkZCh0LnRhcmdldCksIGV2LnRhcmdldCkpXHJcbiAgICAgICAgICAgICAgICB0LmNsb3NlKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQod2luZG93KS5yZXNpemUoKCkgPT4ge1xyXG4gICAgICAgICAgICAkLnRvb2x0aXAoJ3Bvc2l0aW9uJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KShqUXVlcnkpO1xyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBUb29sdGlwIHtcclxuICAgICAgICBwdWJsaWMgdG9vbHRpcDogSlF1ZXJ5O1xyXG4gICAgICAgIHB1YmxpYyB0YXJnZXQ6IEpRdWVyeTtcclxuICAgICAgICBwdWJsaWMgY29udGVudDogSlF1ZXJ5O1xyXG4gICAgICAgIHByaXZhdGUgY2xvc2VDYWxsYmFjayA9ICgpID0+IHsgdGhpcy5jbG9zZSgpOyByZXR1cm4gZmFsc2U7IH07XHJcbiAgICAgICAgcHJpdmF0ZSBzaG93VGltZW91dDtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IocHJpdmF0ZSB0YXJnZXRFbGVtOiBIVE1MRWxlbWVudCwgcHVibGljIG9wdGlvbnM6IHRvb2x0aXBfb3B0aW9ucykge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbScsXHJcbiAgICAgICAgICAgICAgICBzb3VyY2U6ICd0aXRsZScsXHJcbiAgICAgICAgICAgICAgICBjc3NDbGFzczogJycsXHJcbiAgICAgICAgICAgICAgICBjbG9zZVNlbGVjdG9yOiAnLnRvb2x0aXAtY2xvc2UnLFxyXG4gICAgICAgICAgICAgICAgZGlzdGFuY2U6IDUsXHJcbiAgICAgICAgICAgICAgICBjbG9zZU9uQ2xpY2tPdXNpZGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBkZWxheTogMjAwLFxyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiB3aW5kb3csXHJcbiAgICAgICAgICAgICAgICBtYXJnaW46IDEwLFxyXG4gICAgICAgICAgICAgICAgYXBwZW5kVG86ICdib2R5JyxcclxuICAgICAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9ICQodGFyZ2V0RWxlbSkuYWRkQ2xhc3MoJ2hhcy10b29sdGlwJykuZGF0YSgnX3Rvb2x0aXAnLCB0aGlzKTtcclxuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmRlbGF5KXtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2hvdygpLCB0aGlzLm9wdGlvbnMuZGVsYXkpO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvdygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGdldENvbnRlbnQoKTogSlF1ZXJ5IHtcclxuICAgICAgICAgICAgdmFyIGMgPSB0aGlzLm9wdGlvbnMuY29udGVudDtcclxuICAgICAgICAgICAgaWYgKGMpIHtcclxuICAgICAgICAgICAgICAgIGMgPSAkLmlzRnVuY3Rpb24oYykgPyBjLmNhbGwodGhpcy50YXJnZXQpIDogYztcclxuICAgICAgICAgICAgICAgIHJldHVybiAhYyA/IG51bGwgOiB0eXBlb2YgYyA9PSAnc3RyaW5nJyA/ICAkKCc8ZGl2PicpLmh0bWwoYykgOiAkKGMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc291cmNlID09ICd0aXRsZScpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0aXRsZSA9IHRoaXMudGFyZ2V0LmF0dHIoJ3RpdGxlJykgfHwgdGhpcy50YXJnZXQuZGF0YSgndGl0bGUnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0LmF0dHIoJ3RpdGxlJywgJycpLmRhdGEoJ3RpdGxlJywgdGl0bGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoJzxkaXY+JykuaHRtbCh0aXRsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zb3VyY2UgPT0gJ2FuY2hvcicpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gJCh0aGlzLnRhcmdldC5hdHRyKCdocmVmJykpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQubGVuZ3RoID8gY29udGVudCA6IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc2hvdygpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50ID0gdGhpcy5nZXRDb250ZW50KCk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5jb250ZW50KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgY2xvc2UoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudFxyXG4gICAgICAgICAgICAgICAgLm9mZignY2xpY2snLCB0aGlzLmNsb3NlQ2FsbGJhY2spXHJcbiAgICAgICAgICAgICAgICAub24oJ2NsaWNrJywgdGhpcy5vcHRpb25zLmNsb3NlU2VsZWN0b3IsIHRoaXMuY2xvc2VDYWxsYmFjayk7XHJcblxyXG4gICAgICAgICAgICB2YXIgbyA9IHRoaXMub3B0aW9ucztcclxuXHJcbiAgICAgICAgICAgIHZhciBhcHBlbmRUbyA9ICQodGhpcy5vcHRpb25zLmFwcGVuZFRvKS5maXJzdCgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy50b29sdGlwID0gJCgnPGRpdiBjbGFzcz1cInRvb2x0aXAtZnJhbWVcIi8+JylcclxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhvLmNzc0NsYXNzKVxyXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCd0b29sdGlwLScgKyBvLnBvc2l0aW9uKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZCh0aGlzLmNvbnRlbnQuc2hvdygpKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8ZGl2IGNsYXNzPVwidGlwXCIvPicpKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKGFwcGVuZFRvKTtcclxuXHJcbiAgICAgICAgICAgIGlmKGFwcGVuZFRvLmNzcygncG9zaXRpb24nKSA9PSAnc3RhdGljJylcclxuICAgICAgICAgICAgICAgIGFwcGVuZFRvLmNzcygncG9zaXRpb24nLCAncmVsYXRpdmUnKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LmRhdGEoJ190b29sdGlwJywgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24oKTtcclxuICAgICAgICAgICAgYWN0aXZlID0gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBwb3NpdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIG1hcmdpbiA9IHRoaXMub3B0aW9ucy5tYXJnaW47XHJcblxyXG4gICAgICAgICAgICB2YXIgdCA9IHRoaXMudG9vbHRpcDtcclxuICAgICAgICAgICAgdmFyIGUgPSB0aGlzLnRhcmdldDtcclxuICAgICAgICAgICAgdmFyIG8gPSB0aGlzLm9wdGlvbnM7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAvL1Jlc2V0IHNvIGRpbWVudGlvbnMgY2FsY3VsYXRpb25zIGFyZSBjb3JyZWN0XHJcbiAgICAgICAgICAgIHQucmVtb3ZlQXR0cignc3R5bGUnKTtcclxuICAgICAgICAgICAgdmFyIG9mZnNldCA9IGUub2Zmc2V0KCk7XHJcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLm9wdGlvbnMuY29udGFpbmVyO1xyXG4gICAgICAgICAgICB2YXIgY29udGFpbmVyTGVmdCA9IGNvbnRhaW5lciA9PT0gd2luZG93ID8gMCA6ICQoY29udGFpbmVyKS5vZmZzZXQoKS5sZWZ0XHJcbiAgICAgICAgICAgIHZhciBtaW5MZWZ0ID0gY29udGFpbmVyTGVmdCArIG1hcmdpbjtcclxuICAgICAgICAgICAgdmFyIG1heFJpZ2h0ID0gKGNvbnRhaW5lckxlZnQgKyAkKGNvbnRhaW5lcikub3V0ZXJXaWR0aCgpKSAtIG1hcmdpbjtcclxuXHJcbiAgICAgICAgICAgIHZhciB3ID0gdC5vdXRlcldpZHRoKCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgbGVmdCA9IE1hdGgubWF4KG1pbkxlZnQsIG9mZnNldC5sZWZ0ICsgZS5vdXRlcldpZHRoKCkgLyAyIC0gdyAvIDIpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHJpZ2h0T3ZlcmZsb3cgPSAobGVmdCArIHcpIC0gbWF4UmlnaHQ7XHJcbiAgICAgICAgICAgIGlmKHJpZ2h0T3ZlcmZsb3cgPiAwKVxyXG4gICAgICAgICAgICAgICAgbGVmdCA9IE1hdGgubWF4KG1pbkxlZnQsIGxlZnQgLSByaWdodE92ZXJmbG93KVxyXG5cclxuICAgICAgICAgICAgdmFyIHBhcmVudE9mZnNldCA9IHQucGFyZW50KCkub2Zmc2V0KCk7XHJcbiAgICAgICAgICAgIHQuY3NzKHtcclxuICAgICAgICAgICAgICAgICdsZWZ0JzogKGxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCkgKyAncHgnLFxyXG4gICAgICAgICAgICAgICAgJ21heC13aWR0aCc6IChtYXhSaWdodCAtIGxlZnQpICsgJ3B4J1xyXG4gICAgICAgICAgICB9KS5maW5kKCcudGlwJykuY3NzKCdsZWZ0Jywgb2Zmc2V0LmxlZnQgKyBlLm91dGVyV2lkdGgoKSAvIDIgLSBsZWZ0ICsgJ3B4Jyk7XHJcbiAgICAgICAgICAgIC8vU2V0dGluZyB3aWR0aCBjYW4gbWFrZSBoZWlnaHQgdmFyeS4gU28gd2Ugc2V0IHZlcnRpY2FsIHBvc2l0aW9uIGFmdGVyLlxyXG4gICAgICAgICAgICB2YXIgaCA9IHQub3V0ZXJIZWlnaHQoKTtcclxuICAgICAgICAgICAgdC5jc3MoJ3RvcCcsIChvLnBvc2l0aW9uID09ICd0b3AnID8gb2Zmc2V0LnRvcCAtIGggLSBvLmRpc3RhbmNlIDogb2Zmc2V0LnRvcCArIGUub3V0ZXJIZWlnaHQoKSArIG8uZGlzdGFuY2UpIC0gcGFyZW50T2Zmc2V0LnRvcCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgY2xvc2UoKSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnNob3dUaW1lb3V0KTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnRvb2x0aXApXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5zb3VyY2UgPT0gJ2FuY2hvcicpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQuaGlkZSgpLmFwcGVuZFRvKCdib2R5Jyk7XHJcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgdGhpcy50b29sdGlwID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXQuZGF0YSgnX3Rvb2x0aXAnLCBudWxsKTtcclxuICAgICAgICAgICAgYWN0aXZlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=